<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reactive Streams Java Driver</title>
    <link>/mongo-java-driver-reactivestreams/1.1/</link>
    <description>Recent content on Reactive Streams Java Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Oct 2015 09:56:14 +0000</lastBuildDate>
    <atom:link href="/mongo-java-driver-reactivestreams/1.1/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Changelog</title>
      <link>/mongo-java-driver-reactivestreams/1.1/changelog/</link>
      <pubDate>Thu, 08 Oct 2015 09:56:14 +0000</pubDate>
      
      <guid>/mongo-java-driver-reactivestreams/1.1/changelog/</guid>
      <description>

&lt;h2 id=&#34;changelog&#34;&gt;Changelog&lt;/h2&gt;

&lt;p&gt;Changes between released versions&lt;/p&gt;

&lt;h3 id=&#34;1-1&#34;&gt;1.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Updated MongoDB Driver Async to 3.1.0&lt;/p&gt;

&lt;p&gt;Simplified the driver by using the new &lt;code&gt;com.mongodb.async.client.Observable&lt;/code&gt; and mapping to &lt;code&gt;Publisher&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Installation Guide</title>
      <link>/mongo-java-driver-reactivestreams/1.1/getting-started/installation-guide/</link>
      <pubDate>Thu, 08 Oct 2015 09:30:56 +0000</pubDate>
      
      <guid>/mongo-java-driver-reactivestreams/1.1/getting-started/installation-guide/</guid>
      <description>

&lt;h1 id=&#34;installation&#34;&gt;Installation&lt;/h1&gt;

&lt;p&gt;The recommended way to get started using the driver in your project is with a dependency management system.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;pull-right&#34;&gt;
  &lt;input type=&#34;checkbox&#34; checked=&#34;&#34; class=&#34;distroPicker&#34; data-toggle=&#34;toggle&#34; data-on=&#34;Maven&#34; data-off=&#34;Gradle&#34; data-offstyle=&#34;success&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;mongodb-reactive-streams-driver&#34;&gt;MongoDB Reactive Streams Driver&lt;/h2&gt;

&lt;p&gt;The Reactive Streams implementation for asynchronous stream processing with non-blocking back pressure.&lt;/p&gt;

&lt;p&gt;


&lt;section class=&#34;maven&#34;&gt;
&lt;pre&gt;&lt;code class=&#34;ini&#34;&gt;
&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.mongodb&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;mongodb-driver-reactivestreams&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.1.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section class=&#34;gradle hidden&#34;&gt;
&lt;pre&gt;&lt;code class=&#34;ini&#34;&gt;
  dependencies {
      compile &#39;org.mongodb:mongodb-driver-reactivestreams:1.1.0&#39;
  }

&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section class=&#34;downloadInfo small&#34;&gt;
    &lt;p&gt;You can also download the jars
        &lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/org/mongodb/1.0.0&#34; target=&#34;_blank&#34;&gt;directly&lt;/a&gt;
        from sonatype.&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;
        &lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;mongodb-driver-reactivestreams&lt;/code&gt; requires the following dependencies:
        &lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/org/reactivestreams/reactive-streams/1.0.0&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;reactive-streams&lt;/code&gt;&lt;/a&gt;,
        &lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/org/mongodb/bson/3.1.0&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;bson&lt;/code&gt;&lt;/a&gt;,
        &lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/org/mongodb/mongodb-driver-core/3.1.0&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;mongodb-driver-core&lt;/code&gt;&lt;/a&gt;
        and
        &lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/org/mongodb/mongodb-driver-async/3.1.0&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;mongodb-driver-async&lt;/code&gt;&lt;/a&gt;.
    &lt;/p&gt;
&lt;/section&gt;

&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Issues &amp; Help</title>
      <link>/mongo-java-driver-reactivestreams/1.1/issues-help/</link>
      <pubDate>Wed, 18 Mar 2015 16:56:14 +0000</pubDate>
      
      <guid>/mongo-java-driver-reactivestreams/1.1/issues-help/</guid>
      <description>

&lt;h1 id=&#34;issues-help&#34;&gt;Issues &amp;amp; Help&lt;/h1&gt;

&lt;p&gt;We are lucky to have a vibrant MongoDB Java community with lots of varying
experience of using the Java driver.  We often find the quickest way to get support for
general questions is through the &lt;a href=&#34;http://groups.google.com/group/mongodb-user&#34;&gt;mongodb-user google group&lt;/a&gt;
or through &lt;a href=&#34;http://stackoverflow.com/questions/tagged/mongodb+java&#34;&gt;stackoverflow&lt;/a&gt;.  Please also
refer to our own &lt;a href=&#34;http://www.mongodb.org/about/support&#34;&gt;support channels&lt;/a&gt; documentation.&lt;/p&gt;

&lt;h2 id=&#34;bugs-feature-requests&#34;&gt;Bugs / Feature Requests&lt;/h2&gt;

&lt;p&gt;If you think you’ve found a bug or want to see a new feature in the Java driver,
please open a case in our issue management tool, JIRA:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jira.mongodb.org&#34;&gt;Create an account and login&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Navigate to &lt;a href=&#34;https://jira.mongodb.org/browse/JAVARS&#34;&gt;the JAVARS project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Create Issue&lt;/strong&gt; - Please provide as much information as possible about the issue type and how to reproduce it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bug reports in JIRA for the Java Reactive Streams driver and the Core Server (i.e. SERVER) project are &lt;strong&gt;public&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you’ve identified a security vulnerability in a driver or any other
MongoDB project, please report it according to the &lt;a href=&#34;http://docs.mongodb.org/manual/tutorial/create-a-vulnerability-report&#34;&gt;instructions here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;pull-requests&#34;&gt;Pull Requests&lt;/h2&gt;

&lt;p&gt;We are happy to accept contributions to help improve the driver.
We will guide user contributions to ensure they meet the standards of the codebase.
Please ensure that any pull requests include documentation, tests and also pass
a the gradle checks.&lt;/p&gt;

&lt;p&gt;To get started check out the source and work on a branch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/mongodb/mongo-java-driver-reactivestreams.git
$ cd mongo-java-driver-reactivestreams
$ git checkout -b myNewFeature
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, ensure that the code passes gradle checks.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./gradlew check
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>/mongo-java-driver-reactivestreams/1.1/reference/</link>
      <pubDate>Wed, 18 Mar 2015 16:56:14 +0000</pubDate>
      
      <guid>/mongo-java-driver-reactivestreams/1.1/reference/</guid>
      <description>

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;p&gt;The Reactive Streams Java Driver is built upon the &lt;a href=&#34;http://mongodb.github.io/mongo-java-driver/3.1/driver-async/&#34;&gt;&lt;code&gt;MongoDB Async Driver&lt;/code&gt;&lt;/a&gt;
for detailed reference information see the &lt;a href=&#34;http://mongodb.github.io/mongo-java-driver/3.1/driver-async/reference&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>/mongo-java-driver-reactivestreams/1.1/getting-started/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver-reactivestreams/1.1/getting-started/</guid>
      <description>

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;To help you get started quickly on the new driver, follow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/getting-started/installation-guide/&#34;&gt;Installation&lt;/a&gt;, how to install the MongoDB Reactive Streams driver.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/getting-started/quick-tour-primer/&#34;&gt;Quick Tour Primer&lt;/a&gt;, background information on the driver and its asynchronous API.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/getting-started/quick-tour/&#34;&gt;Quick Tour&lt;/a&gt;, an introduction to using the driver for CRUD operations.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/getting-started/quick-tour-admin/&#34;&gt;Admin Quick Tour&lt;/a&gt;, an introduction to using the driver for administrative operations.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Admin Quick Tour</title>
      <link>/mongo-java-driver-reactivestreams/1.1/getting-started/quick-tour-admin/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver-reactivestreams/1.1/getting-started/quick-tour-admin/</guid>
      <description>

&lt;h1 id=&#34;admin-quick-tour&#34;&gt;Admin Quick Tour&lt;/h1&gt;

&lt;p&gt;This is the second part of the MongoDB driver quick tour. In the
&lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/getting-started/quick-tour/&#34;&gt;quick tour&lt;/a&gt; we looked at how to
use the Reactive Streams Java driver to execute basic CRUD operations.  In this section we&amp;rsquo;ll look at some of the
administrative features available in the driver.&lt;/p&gt;

&lt;p&gt;The following code snippets come from the &lt;code&gt;QuickTourAdmin.java&lt;/code&gt; example code
that can be found with the &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver-reactivestreams/blob/master/examples/tour/src/main/tour/QuickTourAdmin.java
&#34;&gt;driver
source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;See the &lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/getting-started/installation-guide/&#34;&gt;installation guide&lt;/a&gt;
for instructions on how to install the MongoDB Driver.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;To get started we&amp;rsquo;ll quickly connect and create a &lt;code&gt;mongoClient&lt;/code&gt;, &lt;code&gt;database&lt;/code&gt; and &lt;code&gt;collection&lt;/code&gt;
variable for use in the examples below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient(new ConnectionString(&amp;quot;mongodb://localhost&amp;quot;));
MongoDatabase database = mongoClient.getDatabase(&amp;quot;mydb&amp;quot;);
MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Calling the &lt;code&gt;getDatabase()&lt;/code&gt; on &lt;code&gt;MongoClient&lt;/code&gt; does not create a database.
Only when a database is written to will a database be created.  Examples include the creation of an index or the insertion of a document
into a previously non-existent collection.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;get-a-list-of-databases&#34;&gt;Get A List of Databases&lt;/h2&gt;

&lt;p&gt;You can get a list of the available databases by calling the &lt;code&gt;listDatabaseNames&lt;/code&gt; method.  Here we use the &lt;code&gt;PrintSubscriber&lt;/code&gt; to print the list
of database names:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;mongoClient.listDatabaseNames().subscribe(new PrintSubscriber&amp;lt;String&amp;gt;(&amp;quot;Database Names: %s&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;drop-a-database&#34;&gt;Drop A Database&lt;/h2&gt;

&lt;p&gt;You can drop a database by name using a &lt;code&gt;MongoClient&lt;/code&gt; instance. Here we wait for the &lt;code&gt;Publisher&lt;/code&gt; to complete before continuing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;subscriber = new ObservableSubscriber&amp;lt;Success&amp;gt;();
mongoClient.getDatabase(&amp;quot;databaseToBeDropped&amp;quot;).drop().subscribe(subscriber);
subscriber.await();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-a-collection&#34;&gt;Create A Collection&lt;/h2&gt;

&lt;p&gt;Collections in MongoDB are created automatically simply by inserted a document into it. Using the
&lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/javadoc?com/mongodb/reactivestreams/client/mongoDatabase.html#createCollection-java.lang.String-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;createCollection&lt;/code&gt;&lt;/a&gt; method,
you can also create a collection explicitly in order to customize its configuration. For example, to create a capped collection sized to 1 megabyte:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;database.createCollection(&amp;quot;cappedCollection&amp;quot;, new CreateCollectionOptions().capped(true).sizeInBytes(0x100000))
    .subscribe(new PrintSubscriber&amp;lt;Success&amp;gt;(&amp;quot;Creation Created!&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-a-list-of-collections&#34;&gt;Get A List of Collections&lt;/h2&gt;

&lt;p&gt;You can get a list of the available collections in a database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;database.listCollectionNames().subscribe(new PrintSubscriber&amp;lt;String&amp;gt;(&amp;quot;Collection Names: %s&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;drop-a-collection&#34;&gt;Drop A Collection&lt;/h2&gt;

&lt;p&gt;You can drop a collection by using the drop() method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;subscriber = new ObservableSubscriber&amp;lt;Success&amp;gt;();
collection.drop().subscribe(subscriber);
subscriber.await();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-an-index&#34;&gt;Create An Index&lt;/h2&gt;

&lt;p&gt;MongoDB supports secondary indexes. To create an index, you just
specify the field or combination of fields, and for each field specify the direction of the index for that field.
For &lt;code&gt;1&lt;/code&gt; ascending  or &lt;code&gt;-1&lt;/code&gt; for descending. The following creates an ascending index on the &lt;code&gt;i&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// create an ascending index on the &amp;quot;i&amp;quot; field
collection.createIndex(new Document(&amp;quot;i&amp;quot;, 1)).subscribe(new PrintSubscriber&amp;lt;String&amp;gt;(&amp;quot;Created an index named: %s&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-a-list-of-indexes-on-a-collection&#34;&gt;Get a List of Indexes on a Collection&lt;/h2&gt;

&lt;p&gt;Use the &lt;code&gt;listIndexes()&lt;/code&gt; method to get a list of indexes. The following uses the
&lt;code&gt;PrintDocumentSubscriber&lt;/code&gt; to print the json version of each index document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.listIndexes().subscribe(new PrintDocumentSubscriber());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The example should print the following indexes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &amp;quot;v&amp;quot; : 1, &amp;quot;key&amp;quot; : { &amp;quot;_id&amp;quot; : 1 }, &amp;quot;name&amp;quot; : &amp;quot;_id_&amp;quot;, &amp;quot;ns&amp;quot; : &amp;quot;mydb.test&amp;quot; }
{ &amp;quot;v&amp;quot; : 1, &amp;quot;key&amp;quot; : { &amp;quot;i&amp;quot; : 1 }, &amp;quot;name&amp;quot; : &amp;quot;i_1&amp;quot;, &amp;quot;ns&amp;quot; : &amp;quot;mydb.test&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;text-indexes&#34;&gt;Text indexes&lt;/h2&gt;

&lt;p&gt;MongoDB also provides text indexes to support text search of string
content. Text indexes can include any field whose value is a string or
an array of string elements. To create a text index specify the string
literal &amp;ldquo;text&amp;rdquo; in the index document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// create a text index on the &amp;quot;content&amp;quot; field
subscriber = new PrintSubscriber&amp;lt;String&amp;gt;(&amp;quot;Created an index named: %s&amp;quot;);
collection.createIndex(new Document(&amp;quot;content&amp;quot;, &amp;quot;text&amp;quot;)).subscribe(subscriber);
subscriber.await();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As of MongoDB 2.6, text indexes are now integrated into the main query
language and enabled by default (here we use the &lt;a href=&#34;http://api.mongodb.org/java/3.0/?com/mongodb/client/model/Filters.html#text-java.lang.String-
&#34;&gt;&lt;code&gt;Filters.text&lt;/code&gt;&lt;/a&gt; helper):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Insert some documents
subscriber = new OperationSubscriber();
collection.insertMany(asList(new Document(&amp;quot;_id&amp;quot;, 0).append(&amp;quot;content&amp;quot;, &amp;quot;textual content&amp;quot;),
        new Document(&amp;quot;_id&amp;quot;, 1).append(&amp;quot;content&amp;quot;, &amp;quot;additional content&amp;quot;),
        new Document(&amp;quot;_id&amp;quot;, 2).append(&amp;quot;content&amp;quot;, &amp;quot;irrelevant content&amp;quot;))).subscribe(subscriber);
subscriber.await();

// Find using the text index
subscriber = new PrintSubscriber(&amp;quot;Text search matches: %s&amp;quot;);
collection.count(text(&amp;quot;textual content -irrelevant&amp;quot;)).subscribe(subscriber);
subscriber.await();

// Find using the $language operator
subscriber = new PrintSubscriber(&amp;quot;Text search matches (english): %s&amp;quot;);
Bson textSearch = text(&amp;quot;textual content -irrelevant&amp;quot;, &amp;quot;english&amp;quot;);
collection.count(textSearch).subscribe(subscriber);
subscriber.await();

// Find the highest scoring match
System.out.print(&amp;quot;Highest scoring document: &amp;quot;);
Document projection = new Document(&amp;quot;score&amp;quot;, new Document(&amp;quot;$meta&amp;quot;, &amp;quot;textScore&amp;quot;));
collection.find(textSearch).projection(projection).first().subscribe(new PrintDocumentSubscriber());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it should print:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;Text search matches: [2]
Text search matches (english): [2]
Highest scoring document: { &amp;quot;_id&amp;quot; : 1, &amp;quot;content&amp;quot; : &amp;quot;additional content&amp;quot;, &amp;quot;score&amp;quot; : 0.75 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information about text search see the &lt;a href=&#34;http://docs.mongodb.org/manual//core/index-text
&#34;&gt;text index&lt;/a&gt; and
&lt;a href=&#34;http://docs.mongodb.org/manual//reference/operator/query/text
&#34;&gt;$text query operator&lt;/a&gt; documentation.&lt;/p&gt;

&lt;h2 id=&#34;running-a-command&#34;&gt;Running a command&lt;/h2&gt;

&lt;p&gt;While not all commands have a specific helper, however you can run any &lt;a href=&#34;http://docs.mongodb.org/manual//reference/command
&#34;&gt;command&lt;/a&gt;
by using the &lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/javadoc?com/mongodb/reactivestreams/client/mongoDatabase.html#runCommand-org.bson.conversions.Bson-com.mongodb.ReadPreference-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;runCommand()&lt;/code&gt;&lt;/a&gt;
method.  Here we call the &lt;a href=&#34;{{ docsref &amp;quot;reference/command/buildInfo&amp;quot; }}&#34;&gt;buildInfo&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;database.runCommand(new Document(&amp;quot;buildInfo&amp;quot;, 1)).subscribe(new PrintDocumentSubscriber());
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Quick Tour Primer</title>
      <link>/mongo-java-driver-reactivestreams/1.1/getting-started/quick-tour-primer/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver-reactivestreams/1.1/getting-started/quick-tour-primer/</guid>
      <description>

&lt;h1 id=&#34;quick-tour-primer&#34;&gt;Quick Tour Primer&lt;/h1&gt;

&lt;p&gt;The aim of this guide is to provide background about the Scala driver and its asynchronous API before going onto
looking at how to use the driver and MongoDB.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;See the &lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/getting-started/installation-guide/&#34;&gt;installation guide&lt;/a&gt;
for instructions on how to install the MongoDB Reactive Streams Java Driver.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;reactive-streams&#34;&gt;Reactive Streams&lt;/h2&gt;

&lt;p&gt;This library is an implementation of the &lt;a href=&#34;http://www.reactive-streams.org&#34;&gt;reactive streams&lt;/a&gt; specification and the reactive stream API
consists of the following components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Publisher&lt;/li&gt;
&lt;li&gt;Subscriber&lt;/li&gt;
&lt;li&gt;Subscription&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A &lt;code&gt;Publisher&lt;/code&gt; is a provider of a potentially unbounded number of sequenced elements, published according to the demand received from it&amp;rsquo;s &lt;code&gt;Subscriber(s)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In response to a call to &lt;code&gt;Publisher.subscribe(Subscriber)&lt;/code&gt; the possible invocation sequences for methods on the &lt;code&gt;Subscriber&lt;/code&gt; are given by the following protocol:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;onSubscribe onNext* (onError | onComplete)?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means that &lt;code&gt;onSubscribe&lt;/code&gt; is always signalled, followed by a possibly unbounded number of &lt;code&gt;onNext&lt;/code&gt; signals (as requested by &lt;code&gt;Subscriber&lt;/code&gt;)
followed by an &lt;code&gt;onError&lt;/code&gt; signal if there is a failure, or an &lt;code&gt;onComplete&lt;/code&gt; signal when no more elements are available—all as long as
the &lt;code&gt;Subscription&lt;/code&gt; is not cancelled.&lt;/p&gt;

&lt;p&gt;For more information about reactive streams go to: &lt;a href=&#34;http://www.reactive-streams.org&#34;&gt;http://www.reactive-streams.org&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;from-async-callbacks-to-subscribers&#34;&gt;From Async Callbacks to Subscribers&lt;/h2&gt;

&lt;p&gt;The MongoDB Reactive Streams Java Driver is built upon the MongoDB Async driver which is callback driven.
The API mirrors the Async driver API and any methods that cause network IO return a &lt;code&gt;Publisher&amp;lt;T&amp;gt;&lt;/code&gt;,
where &lt;code&gt;T&lt;/code&gt; is the type of response for the operation.&lt;br /&gt;
The exception to that rule is for methods in the async driver that return a &lt;code&gt;Void&lt;/code&gt; value in the callback.
In &lt;a href=&#34;http://www.reactive-streams.org&#34;&gt;reactive streams&lt;/a&gt; this is forbidden, so in those circumstances we
return a &lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/javadoc?com/mongodb/reactivestreams/client/Success.html
&#34;&gt;&lt;code&gt;Success&lt;/code&gt;&lt;/a&gt; on the operation.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;All &lt;a href=&#34;http://www.reactive-streams.org/reactive-streams-1.0.0.RC4-javadoc/?org/reactivestreams/Publisher.html&#34;&gt;&lt;code&gt;Publishers&lt;/code&gt;&lt;/a&gt; returned
from the API are cold, meaning that no I/O happens until they are subscribed to and the subscription makes a request. So just creating a
&lt;code&gt;Publisher&lt;/code&gt; won&amp;rsquo;t cause any network IO. It&amp;rsquo;s not util &lt;code&gt;Subscription.request()&lt;/code&gt; is called that the driver executes the operation.&lt;/p&gt;

&lt;p&gt;Publishers in this implementation are unicast. Each &lt;a href=&#34;http://www.reactive-streams.org/reactive-streams-1.0.0.RC4-javadoc/?org/reactivestreams/Subscription.html&#34;&gt;&lt;code&gt;Subscription&lt;/code&gt;&lt;/a&gt;
to a &lt;code&gt;Publisher&lt;/code&gt; relates to a single MongoDB operation and its &lt;a href=&#34;http://www.reactive-streams.org/reactive-streams-1.0.0.RC4-javadoc/?org/reactivestreams/Subscriber.html&#34;&gt;&amp;lsquo;Subscriber&amp;rsquo;&lt;/a&gt;&lt;br /&gt;
will receive its own specific set of results.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;subscribers-used-in-the-quick-tour&#34;&gt;Subscribers used in the Quick Tour&lt;/h2&gt;

&lt;p&gt;For the Quick Tour we have implemented a couple of different Subscribers and although this is an artificial scenario for reactive streams we
do block on the results of one example before starting the next, so as to ensure the state of the database.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ObservableSubscriber&lt;/p&gt;

&lt;p&gt;The base subscriber class is the &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver-reactivestreams/blob/master/examples/tour/src/main/tour/SubscriberHelpers.java
&#34;&gt;&lt;code&gt;ObservableSubscriber&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, a Subscriber
that stores the results of the &lt;code&gt;Publisher&amp;lt;T&amp;gt;&lt;/code&gt;. It also contains an &lt;code&gt;await()&lt;/code&gt; method so we can block for results to ensure the state of
the database before going on to the next example.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;OperationSubscriber&lt;/p&gt;

&lt;p&gt;An implementation of the &lt;code&gt;ObservableSubscriber&lt;/code&gt; that immediately calls &lt;code&gt;Subscription.request&lt;/code&gt; when it&amp;rsquo;s subscribed to.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PrintSubscriber&lt;/p&gt;

&lt;p&gt;An implementation of the &lt;code&gt;OperationSubscriber&lt;/code&gt; that prints a message &lt;code&gt;Subscriber.onComplete&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PrintDocumentSubscriber&lt;/p&gt;

&lt;p&gt;An implementation of the &lt;code&gt;OperationSubscriber&lt;/code&gt; that prints the json version of a &lt;code&gt;Document&lt;/code&gt; when &lt;code&gt;Subscriber.onNext(Document document)&lt;/code&gt; is called.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;blocking-and-non-blocking-examples&#34;&gt;Blocking and non blocking examples&lt;/h2&gt;

&lt;p&gt;As our subscribers contain a latch that is only released when the &lt;code&gt;onComplete&lt;/code&gt; method of the &lt;code&gt;Subscriber&lt;/code&gt; is called, we can use that latch
to block on by calling the &lt;code&gt;await&lt;/code&gt; method.  Below are two examples using our auto-requesting &lt;code&gt;PrintDocumentSubscriber&lt;/code&gt;.&lt;br /&gt;
The first is non-blocking and the second blocks waiting for the &lt;code&gt;Publisher&lt;/code&gt; to complete:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Create a publisher
Publisher&amp;lt;Document&amp;gt; publisher = collection.find();

// Non blocking
publisher.subscribe(new PrintDocumentSubscriber());

Subscriber&amp;lt;Document&amp;gt; subscriber = new PrintDocumentSubscriber();
publisher.subscribe(subscriber);
subscriber.await(); // Block for the publisher to complete
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;publishers-subscribers-and-subscriptions&#34;&gt;Publishers, Subscribers and Subscriptions&lt;/h2&gt;

&lt;p&gt;In general &lt;code&gt;Publishers&lt;/code&gt;, &lt;code&gt;Subscribers&lt;/code&gt; and &lt;code&gt;Subscriptions&lt;/code&gt; are a low level API and it&amp;rsquo;s expected that users and libraries will build more
expressive APIs upon them rather than solely use these interfaces.  As a library solely implementing these interfaces, users will benefit
from this growing ecosystem, which is a core design principle of reactive streams.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick Tour</title>
      <link>/mongo-java-driver-reactivestreams/1.1/getting-started/quick-tour/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver-reactivestreams/1.1/getting-started/quick-tour/</guid>
      <description>

&lt;h1 id=&#34;quick-tour&#34;&gt;Quick Tour&lt;/h1&gt;

&lt;p&gt;The following code snippets come from the &lt;code&gt;QuickTour.java&lt;/code&gt; example code
that can be found with the &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver-reactivestreams/blob/master/examples/tour/src/main/tour/QuickTour.java
&#34;&gt;driver
source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;See the &lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/getting-started/installation-guide/&#34;&gt;installation guide&lt;/a&gt;
for instructions on how to install the MongoDB Reactive Streams Java Driver.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;This guide uses the &lt;code&gt;Subscriber&lt;/code&gt; implementations as covered in the &lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/getting-started/quick-tour-primer/&#34;&gt;Quick Tour Primer&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;make-a-connection&#34;&gt;Make a Connection&lt;/h2&gt;

&lt;p&gt;The following example shows multiple ways to connect to the database &lt;code&gt;mydb&lt;/code&gt; on the local machine, using the
&lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/javadoc?com/mongodb/reactivestreams/client/MongoClients.html#create-com.mongodb.ConnectionString-
&#34;&gt;&lt;code&gt;MongoClients.create&lt;/code&gt;&lt;/a&gt; helper.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// To directly connect to the default server localhost on port 27017
MongoClient mongoClient = MongoClients.create();

// Use a Connection String
MongoClient mongoClient = MongoClients.create(&amp;quot;mongodb://localhost&amp;quot;);

// or a Connection String
MongoClient mongoClient = MongoClients.create(new ConnectionString(&amp;quot;mongodb://localhost&amp;quot;));

// or provide custom MongoClientSettings
ClusterSettings clusterSettings = ClusterSettings.builder().hosts(asList(new ServerAddress(&amp;quot;localhost&amp;quot;))).build();
MongoClientSettings settings = MongoClientSettings.builder().clusterSettings(clusterSettings).build();
MongoClient mongoClient = MongoClients.create(settings);

MongoDatabase database = mongoClient.getDatabase(&amp;quot;mydb&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, the &lt;code&gt;database&lt;/code&gt; object will be a connection to a MongoDB
server for the specified database.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The API only returns &lt;code&gt;Publisher&amp;lt;T&amp;gt;&lt;/code&gt; when network IO required for the operation. For
&lt;code&gt;getDatabase(&amp;quot;mydb&amp;quot;)&lt;/code&gt; there is no network IO required.
A &lt;code&gt;MongoDatabase&lt;/code&gt; instance provides methods to interact with a database
but the database might not actually exist and will only be created on the
insertion of data via some means; e.g. the creation of a collection or the insertion of documents.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;mongoclient&#34;&gt;MongoClient&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;MongoClient&lt;/code&gt; instance actually represents a pool of connections
for a given MongoDB server deployment; you will only need one instance of class
&lt;code&gt;MongoClient&lt;/code&gt; even with multiple concurrently executing asynchronous operations.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;Typically you only create one &lt;code&gt;MongoClient&lt;/code&gt; instance for a given database
cluster and use it across your application. When creating multiple instances:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All resource usage limits (max connections, etc) apply per
&lt;code&gt;MongoClient&lt;/code&gt; instance&lt;/li&gt;
&lt;li&gt;To dispose of an instance, make sure you call &lt;code&gt;MongoClient.close()&lt;/code&gt;
to clean up resources&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;get-a-collection&#34;&gt;Get a Collection&lt;/h2&gt;

&lt;p&gt;To get a collection to operate upon, specify the name of the collection to
the &lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/javadoc?com/mongodb/reactivestreams/client/MongoDatabase.html#getCollection-java.lang.String-
&#34;&gt;&lt;code&gt;getCollection(String collectionName)&lt;/code&gt;&lt;/a&gt;
method:&lt;/p&gt;

&lt;p&gt;The following example gets the collection &lt;code&gt;test&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;insert-a-document&#34;&gt;Insert a Document&lt;/h2&gt;

&lt;p&gt;Once you have the collection object, you can insert documents into the
collection. For example, consider the following JSON document; the document
contains a field &lt;code&gt;info&lt;/code&gt; which is an embedded document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
   &amp;quot;name&amp;quot; : &amp;quot;MongoDB&amp;quot;,
   &amp;quot;type&amp;quot; : &amp;quot;database&amp;quot;,
   &amp;quot;count&amp;quot; : 1,
   &amp;quot;info&amp;quot; : {
               x : 203,
               y : 102
             }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create the document using the Java driver, use the
&lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/javadoc?org/bson/Document.html
&#34;&gt;Document&lt;/a&gt; class. You
can use this class to create the embedded document as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Document doc = new Document(&amp;quot;name&amp;quot;, &amp;quot;MongoDB&amp;quot;)
               .append(&amp;quot;type&amp;quot;, &amp;quot;database&amp;quot;)
               .append(&amp;quot;count&amp;quot;, 1)
               .append(&amp;quot;info&amp;quot;, new Document(&amp;quot;x&amp;quot;, 203).append(&amp;quot;y&amp;quot;, 102));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To insert the document into the collection, use the &lt;code&gt;insertOne()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.insertOne(doc).subscribe(new OperationSubscriber&amp;lt;Success&amp;gt;());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;In the API all methods returning a &lt;code&gt;Publisher&lt;/code&gt; are &amp;ldquo;cold&amp;rdquo; streams meaning that nothing happens until they are Subscribed to.&lt;/p&gt;

&lt;p&gt;The example below does nothing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Publisher&amp;lt;Success&amp;gt; publisher = collection.insertOne(doc);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only when a &lt;code&gt;Publisher&lt;/code&gt; is subscribed to and data requested will the operation happen:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;publisher.subscribe(new Subscriber&amp;lt;Success&amp;gt;() {
    @Override
    public void onSubscribe(final Subscription s) {
        s.request(1);  // &amp;lt;--- Data requested and the insertion will now occur
    }

    @Override
    public void onNext(final Success success) {
        System.out.println(&amp;quot;Inserted&amp;quot;);
    }

    @Override
    public void onError(final Throwable t) {
        System.out.println(&amp;quot;Failed&amp;quot;);
    }

    @Override
    public void onComplete() {
        System.out.println(&amp;quot;Completed&amp;quot;);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the document has been inserted the &lt;code&gt;onNext&lt;/code&gt; method will be called and it will
print &amp;ldquo;Inserted!&amp;rdquo; followed by the &lt;code&gt;onComplete&lt;/code&gt; method which will print &amp;ldquo;Completed&amp;rdquo;.&lt;br /&gt;
If there was an error for any reason the &lt;code&gt;onError&lt;/code&gt; method would print &amp;ldquo;Failed&amp;rdquo;.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;add-multiple-documents&#34;&gt;Add Multiple Documents&lt;/h2&gt;

&lt;p&gt;To add multiple documents, you can use the &lt;code&gt;insertMany()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The following example will add multiple documents of the form:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{ &amp;quot;i&amp;quot; : value }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create the documents in a loop.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;Document&amp;gt; documents = new ArrayList&amp;lt;Document&amp;gt;();
for (int i = 0; i &amp;lt; 100; i++) {
    documents.add(new Document(&amp;quot;i&amp;quot;, i));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To insert these documents to the collection, pass the list of documents to the
&lt;code&gt;insertMany()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;subscriber = new ObservableSubscriber&amp;lt;Success&amp;gt;();
collection.insertMany(documents).subscribe(subscriber);
subscriber.await();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we block on the &lt;code&gt;Publisher&lt;/code&gt; to finish so that when we call the next operation we know the data has been inserted into the database!&lt;/p&gt;

&lt;h2 id=&#34;count-documents-in-a-collection&#34;&gt;Count Documents in A Collection&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve inserted 101 documents (the 100 we did in the loop, plus
the first one), we can check to see if we have them all using the
&lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/javadoc?com/mongodb/reactivestreams/client/mongoCollection#count--.html
&#34;&gt;count()&lt;/a&gt;
method. The following code should print &lt;code&gt;101&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.count()
          .subscribe(new PrintSubscriber&amp;lt;Long&amp;gt;(&amp;quot;total # of documents after inserting &amp;quot;
                                              + &amp;quot; 100 small ones (should be 101): %s&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;query-the-collection&#34;&gt;Query the Collection&lt;/h2&gt;

&lt;p&gt;Use the &lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/javadoc?com/mongodb/reactivestreams/client/MongoCollection.html#find--
&#34;&gt;find()&lt;/a&gt;
method to query the collection.&lt;/p&gt;

&lt;h3 id=&#34;find-the-first-document-in-a-collection&#34;&gt;Find the First Document in a Collection&lt;/h3&gt;

&lt;p&gt;call the first() method on the result of the find() of method&lt;/p&gt;

&lt;p&gt;To get the first document in the collection, call the
&lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/javadoc?com/mongodb/reactivestreams/client/MongoIterable.html#first--
&#34;&gt;first()&lt;/a&gt;
method on the &lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/javadoc?com/mongodb/reactivestreams/client/MongoCollection.html#find--
&#34;&gt;find()&lt;/a&gt;
operation. &lt;code&gt;collection.find().first()&lt;/code&gt; returns the first document or if no document is found the publisher just completes.
This is useful for queries that should only match a single document, or if you are interested in the first document only.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;subscriber = new PrintDocumentSubscriber();
collection.find().first().subscribe(subscriber);
subscriber.await();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The example will print the following document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &amp;quot;_id&amp;quot; : { &amp;quot;$oid&amp;quot; : &amp;quot;551582c558c7b4fbacf16735&amp;quot; },
  &amp;quot;name&amp;quot; : &amp;quot;MongoDB&amp;quot;, &amp;quot;type&amp;quot; : &amp;quot;database&amp;quot;, &amp;quot;count&amp;quot; : 1,
  &amp;quot;info&amp;quot; : { &amp;quot;x&amp;quot; : 203, &amp;quot;y&amp;quot; : 102 } }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;_id&lt;/code&gt; element has been added automatically by MongoDB to your
document and your value will differ from that shown. MongoDB reserves field
names that start with
&amp;ldquo;_&amp;rdquo; and &amp;ldquo;$&amp;rdquo; for internal use.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;find-all-documents-in-a-collection&#34;&gt;Find All Documents in a Collection&lt;/h3&gt;

&lt;p&gt;To retrieve all the documents in the collection, we will use the
&lt;code&gt;find()&lt;/code&gt; method. The &lt;code&gt;find()&lt;/code&gt; method returns a &lt;code&gt;FindPublisher&lt;/code&gt; instance that
provides a fluent interface for chaining or controlling find operations.
The following code retrieves all documents in the collection and prints them out
(101 documents):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;subscriber = new PrintDocumentSubscriber();
collection.find().subscribe(subscriber);
subscriber.await();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-a-single-document-with-a-query-filter&#34;&gt;Get A Single Document with a Query Filter&lt;/h2&gt;

&lt;p&gt;We can create a filter to pass to the find() method to get a subset of
the documents in our collection. For example, if we wanted to find the
document for which the value of the &amp;ldquo;i&amp;rdquo; field is 71, we would do the
following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import static com.mongodb.client.model.Filters.*;

collection.find(eq(&amp;quot;i&amp;quot;, 71)).first().subscribe(new PrintDocumentSubscriber());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will eventually print just one document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &amp;quot;_id&amp;quot; : { &amp;quot;$oid&amp;quot; : &amp;quot;5515836e58c7b4fbc756320b&amp;quot; }, &amp;quot;i&amp;quot; : 71 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Use the &lt;a href=&#34;http://api.mongodb.org/java/3.0/?com/mongodb/client/model/Filters.html&#34;&gt;Filters&lt;/a&gt;, &lt;a href=&#34;http://api.mongodb.org/java/3.0/?com/mongodb/client/model/Sorts.html&#34;&gt;Sorts&lt;/a&gt; and &lt;a href=&#34;http://api.mongodb.org/java/3.0/?com/mongodb/client/model/Projections.html&#34;&gt;Projections&lt;/a&gt;
helpers for simple and concise ways of building up queries.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;get-a-set-of-documents-with-a-query&#34;&gt;Get a Set of Documents with a Query&lt;/h2&gt;

&lt;p&gt;We can use the query to get a set of documents from our collection. For
example, if we wanted to get all documents where &lt;code&gt;&amp;quot;i&amp;quot; &amp;gt; 50&lt;/code&gt;, we could
write:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// now use a range query to get a larger subset
collection.find(gt(&amp;quot;i&amp;quot;, 50)).subscribe(new PrintDocumentSubscriber());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which should print the documents where &lt;code&gt;i &amp;gt; 50&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We could also get a range, say &lt;code&gt;50 &amp;lt; i &amp;lt;= 100&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(and(gt(&amp;quot;i&amp;quot;, 50), lte(&amp;quot;i&amp;quot;, 100))).subscribe(new PrintDocumentSubscriber());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sorting-documents&#34;&gt;Sorting documents&lt;/h2&gt;

&lt;p&gt;We can also use the &lt;a href=&#34;http://api.mongodb.org/java/3.0/?com/mongodb/client/model/Sorts.html
&#34;&gt;Sorts&lt;/a&gt; helpers to sort documents.
We add a sort to a find query by calling the &lt;code&gt;sort()&lt;/code&gt; method on a &lt;code&gt;FindPublisher&lt;/code&gt;.  Below we use the &lt;a href=&#34;{{ &amp;lt; coreapiref &amp;quot;com/mongodb/client/model/Filters.html#exists-java.lang.String-&amp;quot;&amp;gt;}}&#34;&gt;&lt;code&gt;exists()&lt;/code&gt;&lt;/a&gt; helper and sort
&lt;a href=&#34;{{ &amp;lt; coreapiref &amp;quot;com/mongodb/client/model/Sorts.html#exists-java.lang.String-&amp;quot;&amp;gt;}}&#34;&gt;&lt;code&gt;descending(&amp;quot;i&amp;quot;)&lt;/code&gt;&lt;/a&gt; helper to sort our documents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(exists(&amp;quot;i&amp;quot;)).sort(descending(&amp;quot;i&amp;quot;)).subscribe(new PrintDocumentSubscriber());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;projecting-fields&#34;&gt;Projecting fields&lt;/h2&gt;

&lt;p&gt;Sometimes we don&amp;rsquo;t need all the data contained in a document. The &lt;a href=&#34;http://api.mongodb.org/java/3.0/?com/mongodb/client/model/Projections.html
&#34;&gt;Projections&lt;/a&gt;
helpers can be used to build the projection parameter for the find operation and limit the fields returned.&lt;br /&gt;
Below we&amp;rsquo;ll sort the collection, exclude the &lt;code&gt;_id&lt;/code&gt; field and output the first matching document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find().projection(excludeId()).subscribe(new PrintDocumentSubscriber());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;updating-documents&#34;&gt;Updating documents&lt;/h2&gt;

&lt;p&gt;There are numerous &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/update-field/&#34;&gt;update operators&lt;/a&gt;
supported by MongoDB.&lt;/p&gt;

&lt;p&gt;To update at most a single document (may be 0 if none match the filter), use the &lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/javadoc?com/mongodb/reactivestreams/client/MongoCollection.html#updateOne-org.bson.conversions.Bson-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;updateOne&lt;/code&gt;&lt;/a&gt;
method to specify the filter and the update document.  Here we update the first document that meets the filter &lt;code&gt;i&lt;/code&gt; equals &lt;code&gt;10&lt;/code&gt; and set the value of &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;110&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.updateOne(eq(&amp;quot;i&amp;quot;, 10), new Document(&amp;quot;$set&amp;quot;, new Document(&amp;quot;i&amp;quot;, 110)))
          .subscribe(new PrintSubscriber&amp;lt;UpdateResult&amp;gt;(&amp;quot;Update Result: %s&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To update all documents matching the filter use the &lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/javadoc?com/mongodb/reactivestreams/client/MongoCollection.html#updateMany-org.bson.conversions.Bson-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;updateMany&lt;/code&gt;&lt;/a&gt;
method.  Here we increment the value of &lt;code&gt;i&lt;/code&gt; by &lt;code&gt;100&lt;/code&gt; where &lt;code&gt;i&lt;/code&gt;
is less than &lt;code&gt;100&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.updateMany(lt(&amp;quot;i&amp;quot;, 100), new Document(&amp;quot;$inc&amp;quot;, new Document(&amp;quot;i&amp;quot;, 100)))
          .subscribe(new PrintSubscriber&amp;lt;UpdateResult&amp;gt;(&amp;quot;Update Result: %s&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The update methods return an &lt;a href=&#34;http://api.mongodb.org/java/3.0/?com/mongodb/client/result/UpdateResult.html
&#34;&gt;&lt;code&gt;UpdateResult&lt;/code&gt;&lt;/a&gt;,
which provides information about the operation including the number of documents modified by the update.&lt;/p&gt;

&lt;h2 id=&#34;deleting-documents&#34;&gt;Deleting documents&lt;/h2&gt;

&lt;p&gt;To delete at most a single document (may be 0 if none match the filter) use the &lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/javadoc?com/mongodb/reactivestreams/client/MongoCollection.html#deleteOne-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;deleteOne&lt;/code&gt;&lt;/a&gt;
method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.deleteOne(eq(&amp;quot;i&amp;quot;, 110))
          .subscribe(new PrintSubscriber&amp;lt;DeleteResult&amp;gt;(&amp;quot;Delete Result: %s&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To delete all documents matching the filter use the &lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/javadoc?com/mongodb/reactivestreams/client/MongoCollection.html#deleteMany-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;deleteMany&lt;/code&gt;&lt;/a&gt; method.&lt;br /&gt;
Here we delete all documents where &lt;code&gt;i&lt;/code&gt; is greater or equal to &lt;code&gt;100&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.deleteMany(gte(&amp;quot;i&amp;quot;, 100)
          .subscribe(new PrintSubscriber&amp;lt;DeleteResult&amp;gt;(&amp;quot;Delete Result: %s&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The delete methods return a &lt;a href=&#34;http://api.mongodb.org/java/3.0/?com/mongodb/client/result/DeleteResult.html
&#34;&gt;&lt;code&gt;DeleteResult&lt;/code&gt;&lt;/a&gt;,
which provides information about the operation including the number of documents deleted.&lt;/p&gt;

&lt;h2 id=&#34;bulk-operations&#34;&gt;Bulk operations&lt;/h2&gt;

&lt;p&gt;These commands allow for the execution of bulk
insert/update/delete operations. There are two types of bulk operations:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ordered bulk operations.&lt;/p&gt;

&lt;p&gt;Executes all the operation in order and error out on the first write error.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unordered bulk operations.&lt;/p&gt;

&lt;p&gt;Executes all the operations and reports any the errors.&lt;/p&gt;

&lt;p&gt;Unordered bulk operations do not guarantee order of execution.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;rsquo;s look at two simple examples using ordered and unordered
operations:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 1. Ordered bulk operation - order is guaranteed
subscriber = new PrintSubscriber&amp;lt;BulkWriteResult&amp;gt;(&amp;quot;Bulk write results: %s&amp;quot;);
collection.bulkWrite(
  Arrays.asList(new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 4)),
                new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 5)),
                new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 6)),
                new UpdateOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 1),
                                     new Document(&amp;quot;$set&amp;quot;, new Document(&amp;quot;x&amp;quot;, 2))),
                new DeleteOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 2)),
                new ReplaceOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 3),
                                      new Document(&amp;quot;_id&amp;quot;, 3).append(&amp;quot;x&amp;quot;, 4)))
  ).subscribe(subscriber);
subscriber.await();

 // 2. Unordered bulk operation - no guarantee of order of operation
subscriber = new PrintSubscriber&amp;lt;BulkWriteResult&amp;gt;(&amp;quot;Bulk write results: %s&amp;quot;);
collection.bulkWrite(
  Arrays.asList(new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 4)),
                new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 5)),
                new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 6)),
                new UpdateOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 1),
                                     new Document(&amp;quot;$set&amp;quot;, new Document(&amp;quot;x&amp;quot;, 2))),
                new DeleteOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 2)),
                new ReplaceOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 3),
                                      new Document(&amp;quot;_id&amp;quot;, 3).append(&amp;quot;x&amp;quot;, 4))),
  new BulkWriteOptions().ordered(false)
  ).subscribe(subscriber);
subscriber.await();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;Use of the bulkWrite methods is not recommended when connected to pre-2.6 MongoDB servers, as this was the first server version to support
bulk write commands for insert, update, and delete in a way that allows the driver to implement the correct semantics for BulkWriteResult
and BulkWriteException. The methods will still work for pre-2.6 servers, but performance will suffer, as each write operation has to be
executed one at a time.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reactive Streams Driver</title>
      <link>/mongo-java-driver-reactivestreams/1.1/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver-reactivestreams/1.1/</guid>
      <description>

&lt;h2 id=&#34;mongodb-reactive-streams-java-driver-documentation&#34;&gt;MongoDB Reactive Streams Java Driver Documentation&lt;/h2&gt;

&lt;p&gt;Welcome to the MongoDB Reactive Streams Java driver documentation hub.&lt;/p&gt;

&lt;p&gt;The Reactive Streams implementation is built upon the
&lt;a href=&#34;http://mongodb.github.io/mongo-java-driver/3.1/driver-async&#34;&gt;&lt;code&gt;MongoDB Async Driver&lt;/code&gt;&lt;/a&gt; and we mirror their API.
For reference documentation please see the async driver documentation.&lt;/p&gt;

&lt;h3 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver-reactivestreams/1.1/mongo-java-driver-reactivestreams/1.1/getting-started/&#34;&gt;Getting Started&lt;/a&gt; guide contains installation instructions
and a simple tutorial to get up  and running quickly.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>